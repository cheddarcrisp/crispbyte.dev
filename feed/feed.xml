<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>Crisp Byte</title>
	<subtitle>Programming. Puns.</subtitle>
	<link href="https://crispbyte.dev/feed/feed.xml" rel="self"/>
	<link href="https://crispbyte.dev/"/>
	<updated>2024-04-24T00:00:00Z</updated>
	<id>https://crispbyte.dev/</id>
	<author>
		<name>CheddarCrisp</name>
		<email>cheddar@crispbyte.dev</email>
	</author>
	
	<entry>
		<title>Co-op Resources</title>
		<link href="https://crispbyte.dev/blog/2024-04-24-Coop_Resources/"/>
		<updated>2024-04-24T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-04-24-Coop_Resources/</id>
		<content type="html">&lt;p&gt;This list is not a how-to on starting or operating a co-op. It is mostly a link dump. The resources that seem most useful are at the top and should provide all you need to get started. I haven&#39;t read through all of these resources but they all look directly applicable at least.&lt;/p&gt;
&lt;p&gt;The one place that is probably the most helpful - definitely for the US and possibly in general - is the &lt;a href=&quot;https://www.usworker.coop/en/&quot;&gt;US Federation of Worker Cooperatives&lt;/a&gt;. I highly recommend attending the startup webinar or &lt;a href=&quot;https://www.youtube.com/watch?v=LaBJm2WPf2Y&amp;amp;t=4s&quot;&gt;watching a recording&lt;/a&gt;. There is a &lt;a href=&quot;https://docs.google.com/document/d/1kFGLppPxCWHI7HsbF6W3fyMDRPaIqkpLubknA6hKlds/edit&quot;&gt;link document&lt;/a&gt; that goes with that webinar with more resources I don&#39;t list here.&lt;/p&gt;
&lt;p&gt;These are good introductions to co-ops, how they work, and why you&#39;d want one.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://electricembers.coop//pubs/TechCoopHOWTO.pdf&quot;&gt;A Technology Freelancer&#39;s Guide To Starting a Worker Cooperative (PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://modelviewculture.com/pieces/worker-coops-a-better-way-to-make-a-living-in-tech&quot;&gt;Worker Coops: A Better Way to Make a Living in Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://drive.google.com/file/d/0B_rgt0QdXUbycnprd3hhYzdWNnc/view&quot;&gt;Think Outside the Boss (PDF Book)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nathanschneider.info/books/everything-for-everyone/&quot;&gt;Everything for Everyone (Book)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Though the organization is not specifically for co-ops, &lt;a href=&quot;https://www.seedsforchange.org.uk/resources&quot;&gt;Seeds for Change&lt;/a&gt; does offer some resources for co-ops in the UK.&lt;/p&gt;
&lt;p&gt;For governance, &lt;a href=&quot;https://www.sociocracyforall.org/&quot;&gt;Sociocracy&lt;/a&gt; looks promising. I&#39;d recommend going through their &lt;a href=&quot;https://learn.sociocracyforall.org/courses/sociocracy-journey/&quot;&gt;free course&lt;/a&gt; that explains the fundamentals of this governance model.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.co-oplaw.org/&quot;&gt;Co-opLaw.org&lt;/a&gt; has a bunch of legal resources for co-ops.&lt;/p&gt;
&lt;p&gt;A co-op called Enspiral shares their &lt;a href=&quot;https://handbook.enspiral.com/&quot;&gt;entire handbook&lt;/a&gt; online for free.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Improvements</title>
		<link href="https://crispbyte.dev/blog/2024-01-09-03-Improvements/"/>
		<updated>2024-01-09T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-01-09-03-Improvements/</id>
		<content type="html">&lt;h2 id=&quot;format&quot; tabindex=&quot;-1&quot;&gt;Format &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-03-Improvements/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;QPACK might be better than HPACK, but I can&#39;t find a .NET implementation of QPACK.&lt;/li&gt;
&lt;li&gt;Both QPACK and HPACK use a static table designed for compressing the most common headers on the web. A different static table designed for SDBD could compress things better.&lt;/li&gt;
&lt;li&gt;For better interaction with streams, I want to change the metadata length value from number of bytes to number of headers. We know how many headers there are before we start encoding them. We don&#39;t know how many bytes the result will be until encoding is done.&lt;/li&gt;
&lt;li&gt;Also 64KB of header data is possible, but having over 64K headers shouldn&#39;t happen. Even 256 headers seems absurd, so maybe number of headers could be shrunk to one byte.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;demo-implementation&quot; tabindex=&quot;-1&quot;&gt;Demo Implementation &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-03-Improvements/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The proof of concept could use tests, error handling, data validation, and a fix for the warnings. At the least, validate the &lt;code&gt;content-name&lt;/code&gt; so nobody can do anything hacky with it.&lt;/li&gt;
&lt;li&gt;It shouldn&#39;t be hard to add &lt;code&gt;content-type&lt;/code&gt; to the demo output.&lt;/li&gt;
&lt;li&gt;I think a reference API built around streams instead of byte arrays would feel nicer.&lt;/li&gt;
&lt;li&gt;Wrangling the &lt;code&gt;hpack&lt;/code&gt; NuGet package to work around streams might take some effort.&lt;/li&gt;
&lt;li&gt;Also a spec-compliant version of &lt;code&gt;Document&lt;/code&gt;. &lt;code&gt;Dictionary&amp;lt;string, string&amp;gt;&lt;/code&gt; breaks all three rules for headers listed back in &lt;a href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics&quot;&gt;Semantics&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
</content>
	</entry>
	
	<entry>
		<title>The Heart of the Code</title>
		<link href="https://crispbyte.dev/blog/2024-01-09-02-The_Heart_of_the_Code/"/>
		<updated>2024-01-09T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-01-09-02-The_Heart_of_the_Code/</id>
		<content type="html">&lt;p&gt;To complete the proof of concept we need to implement &lt;code&gt;SDBD.ICodec&lt;/code&gt;. This is what we&#39;re proving after all. The most complicated part will be the HPACK encoding. I&#39;d rather not implement that myself, not for something basic. Fortunately there is a NuGet package that should do the trick. It&#39;s called simply &lt;code&gt;hpack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the risk of pulling a &lt;a href=&quot;https://knowyourmeme.com/memes/how-to-draw-an-owl&quot;&gt;&amp;quot;rest of the owl&amp;quot;&lt;/a&gt;, I&#39;m going to jump straight to the final code. I think a short walkthrough is enough to show how the code works without going through the coding process step by step.&lt;/p&gt;
&lt;h2 id=&quot;encoder&quot; tabindex=&quot;-1&quot;&gt;Encoder &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-02-The_Heart_of_the_Code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Document&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; dataLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; contentLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Dictionary&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;content-length&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dataLength&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; headers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Metadata&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Union&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;contentLength&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; packedHeaders &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;packHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; headerLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Convert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToUInt16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;packedHeaders&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteByte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0x01&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;BitConverter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerLength&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;packedHeaders&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;packHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IEnumerable&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;KeyValuePair&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//0 will disable dynamic table that we don&#39;t need anyways&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; encoder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;hpack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Encoder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; output &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; writer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;BinaryWriter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;output&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;foreach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; headers&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    encoder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;EncodeHeader&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;writer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; output&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first thing we do is add our one required header to the metadata: &lt;code&gt;content-length&lt;/code&gt;. We then pack the headers. The &lt;code&gt;hpack&lt;/code&gt; encoder is pretty easy to use. Passing that &lt;code&gt;0&lt;/code&gt; into the constructor should disable some HPACK features that don&#39;t make sense in the context of SDBD.&lt;/p&gt;
&lt;p&gt;That gives us all the bits we need to write out a document. Version number: &lt;code&gt;0x01&lt;/code&gt;. Header length as an unsigned 16-bit integer. The packed headers themselves. And finally the data.&lt;/p&gt;
&lt;p&gt;If I encode a file named &lt;code&gt;test.txt&lt;/code&gt; with the content &lt;code&gt;This is a test. This is only a test.&lt;/code&gt;, this is the output:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0000	01 17 00 00 89 21 ea 49  6a 4a d5 0e 92 ff 86 49   .....!.IjJ.....I
0010	50 95 d3 e5 3f 0f 0d 02  33 36 54 68 69 73 20 69   P...?...36This i
0020	73 20 61 20 74 65 73 74  2e 20 54 68 69 73 20 69   s a test. This i
0030	73 20 6f 6e 6c 79 20 61  20 74 65 73 74 2e         s only a test.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks promising. The first byte is the version, the next two decode to integer 23. The next 23 bytes look like the headers to me, and we can even see the content length 36 in the text. Finally there&#39;s the 36 bytes of data.&lt;/p&gt;
&lt;h2 id=&quot;decoder&quot; tabindex=&quot;-1&quot;&gt;Decoder &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-02-The_Heart_of_the_Code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; input &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; version &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; version &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token number&quot;&gt;0x01&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DecodeV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Unsupported version&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DecodeV1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Stream&lt;/span&gt; stream&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; headerLengthBytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadExactly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerLengthBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; headerLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BitConverter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToUInt16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerLengthBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; headerBytes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;headerLength&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadExactly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; headers &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;unpackHeaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headerBytes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
   
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;/span&gt; contentLengthString&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;content-length&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;out&lt;/span&gt; contentLengthString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; contentLength &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;contentLengthString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;contentLength&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadExactly&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To decode we first read the version byte. If the version is the only version we have implemented now, we jump into the real implementation. (Throw an exception otherwise.)&lt;/p&gt;
&lt;p&gt;We read the next two bytes to get the header length. We read that number of bytes to get the encoded headers. We decode the headers, extract &lt;code&gt;content-length&lt;/code&gt;, and read that number of bytes as the data. Then we pack it up in our &lt;code&gt;Document&lt;/code&gt; data structure and send it back.&lt;/p&gt;
&lt;p&gt;I left out the implementation of &lt;code&gt;unpackHeaders&lt;/code&gt; here because it&#39;s mildly confusing if you&#39;re not familiar with old .NET patterns. You can find it with the complete &lt;a href=&quot;https://github.com/cheddarcrisp/sdbd-demo&quot;&gt;source for this implementation on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;and-now&quot; tabindex=&quot;-1&quot;&gt;And now... &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-02-The_Heart_of_the_Code/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s time for a break. I have successfully created a brand new data format. Or at least stitched one together like Frankenstein&#39;s monster. I have a working implementation that can encode and decode the format, albeit with only one header implemented.&lt;/p&gt;
&lt;p&gt;I&#39;m already building a list of improvements. I&#39;m not planning on tackling them for a bit. First I want to hear other people&#39;s feedback. Since this is the internet, somebody will no doubt tell me that something like this already exists. If that&#39;s true, great! I&#39;ll be sure to link it here for anybody interested.&lt;/p&gt;
&lt;p&gt;Either way I certainly haven&#39;t wasted my time, and I hope you don&#39;t feel like you&#39;ve wasted yours. I think the process of developing the SDBD format and a proof of concept was a valuable learning experience on its own. I want to hear feedback, so feel free to log issues on GitHub or find me on the Fediverse.&lt;/p&gt;
&lt;p&gt;If you like SDBD and want to use it, go for it! I think the format itself is sound. The demo implementation has at least one security issue, so use it with caution.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Building a Proof of Concept</title>
		<link href="https://crispbyte.dev/blog/2024-01-09-01-Building_A_Proof_of_Concept/"/>
		<updated>2024-01-09T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-01-09-01-Building_A_Proof_of_Concept/</id>
		<content type="html">&lt;p&gt;The format certainly looks sound. Could there be any surprises when we try to implement it? There&#39;s one way to find out. I&#39;ll write a Proof of Concept. Finally, we get to the code!&lt;/p&gt;
&lt;h2 id=&quot;looking-sharp&quot; tabindex=&quot;-1&quot;&gt;Looking Sharp &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-01-Building_A_Proof_of_Concept/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My career experience has mostly been with .NET and web development. My latest job had me coding in Ruby on Rails. After a two year absence, I&#39;m anxious to get back into the world of .NET. I&#39;m going to do the implementation in C# with .NET 8.0.&lt;/p&gt;
&lt;h2 id=&quot;start-at-the-interface&quot; tabindex=&quot;-1&quot;&gt;Start at the interface &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-01-Building_A_Proof_of_Concept/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When I code, I always start at the interfaces. Whether it&#39;s the user interface (UI) or the application programming interfaces (APIs), starting at the interfaces sets up good boundaries that guide good design. I&#39;ll start by defining the contract for an API that encodes and decodes SDBD data.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SDBD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ICodec&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token return-type class-name&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Document&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;record&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Document&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;Dictionary&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; Metadata&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; Data
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;a-basic-demo&quot; tabindex=&quot;-1&quot;&gt;A basic demo &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-01-Building_A_Proof_of_Concept/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The demo program will be a command line encoder/decoder. To encode, pass a file path on its own or with &lt;code&gt;-e&lt;/code&gt; as the first parameter. The program will encode the file to SDBD with the original filename embedded and write a file with a &lt;code&gt;.sdbd&lt;/code&gt; extension. To decode, pass &lt;code&gt;-d&lt;/code&gt; as the first parameter and the path to an &lt;code&gt;.sdbd&lt;/code&gt; file. It will write a file with the original data and the original filename.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;SDBD&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ICodec&lt;/span&gt; codec &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;SDBD&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Codec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;encode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; inputData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; File&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; filename &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetFileName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;encode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;SDBD&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Document&lt;/span&gt; document &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;content-name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filename &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    inputData
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; outputData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; codec&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  File&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteAllBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token interpolation-string&quot;&gt;&lt;span class=&quot;token string&quot;&gt;$&quot;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token expression language-csharp&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;.sdbd&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; outputData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; document &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; codec&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;inputData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  File&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteAllBytes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Metadata&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;content-name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt; encode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ParseArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; args &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-d&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-e&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt;&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; filepath&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    _ &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token constructor-invocation class-name&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;I don&#39;t like those arguments&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;first-run&quot; tabindex=&quot;-1&quot;&gt;First run &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-09-01-Building_A_Proof_of_Concept/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I&#39;ll mock up an implementation of the interface to make sure the program is working. All it will do is echo back the data it&#39;s given, and give the document the name &lt;code&gt;text.txt&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;SDBD&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Codec&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token type-list&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;ICodec&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Decode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;content-name&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;text.txt&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      data
    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Document&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we run the program on any file, it will output the same file with the &lt;code&gt;.sdbd&lt;/code&gt; extension added. Run the program on a file with the &lt;code&gt;-d&lt;/code&gt; parameter and it will output the same data with the file name &lt;code&gt;text.txt&lt;/code&gt;. Looking good so far.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>What Does SDBD Actually Look Like?</title>
		<link href="https://crispbyte.dev/blog/2024-01-07-03-Data_Format/"/>
		<updated>2024-01-07T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-01-07-03-Data_Format/</id>
		<content type="html">&lt;p&gt;To turn the semantics into a real file format, we need to define what they look like as actual data. How do you write an SDBD to a stream or a disk? How do we turn our HTTP-like semantics into a real document? That question almost answers itself. I&#39;ll keep stealing from HTTP.&lt;/p&gt;
&lt;h2 id=&quot;consider-the-options&quot; tabindex=&quot;-1&quot;&gt;Consider the options &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-03-Data_Format/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are three versions of HTTP that each represent headers in a different format. HTTP/1.1 uses a human-readable plain text format. It&#39;s basically the format you&#39;ll see in browser development tools and blog posts about HTTP headers. HTTP/2 uses a compressible binary format called HPACK. HTTP/3 uses a variant of HPACK called QPACK that&#39;s designed to be less trouble for the underlying QUIC protocol.&lt;/p&gt;
&lt;p&gt;I&#39;m going to decide that SDBD will be a binary format. No part of it needs to be plain text. I&#39;m going to choose HPACK over QPACK. Mostly that&#39;s because I think it should be easier to implement the proof of concept with HPACK due to available tools.&lt;/p&gt;
&lt;h2 id=&quot;represent&quot; tabindex=&quot;-1&quot;&gt;Represent &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-03-Data_Format/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s time to put it together. I already have plans for updating the format, so the very first byte of SDBD will be a version number. We&#39;ll start simply with &lt;code&gt;0x01&lt;/code&gt;. The rest of this section will describe a &lt;code&gt;version 1&lt;/code&gt; document.&lt;/p&gt;
&lt;p&gt;Next comes the metadata. We need to know how long the metadata is, so we&#39;ll use two bytes to store an unsigned int to tell us the length of the metadata section in bytes. (But what happens if the metadata is more than 64KB? We&#39;ll worry about that later.) The metadata headers will be encoded with HPACK.&lt;/p&gt;
&lt;p&gt;After the metadata comes the data, which better be the exact length defined by &lt;code&gt;content-length&lt;/code&gt;, or bad things will happen.&lt;/p&gt;
&lt;p&gt;That&#39;s it. If we encode the original example with this format, this is the result:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;0000	01 3a 00 00 89 21 ea 49  6a 4a d5 0e 92 ff 8d 5f   .:...!.IjJ....._
0010	ff f8 20 74 d7 41 57 4f  94 af 1d 9f 0f 0b 02 62   .. t.AWO.......b
0020	72 0f 10 94 49 7c a5 8a  e8 19 aa fb 50 93 8e c4   r...I|......P...
0030	15 30 5a 85 86 82 18 df  0f 0d 02 39 35 a1 20 04   .0Z........95. .
0040	00 20 50 6e eb 2b e9 96  6c 96 ac 25 3e a8 69 22   . Pn.+..l..%&gt;.i&quot;
0050	88 0b ea c9 42 ee de f8  24 4d b3 bd 08 d5 80 db   ....B...$M......
0060	f0 b9 02 31 a3 be 91 b7  65 bd 28 82 7f 92 1c 88   ...1....e.(.....
0070	f2 38 1d eb 56 54 b9 93  d3 59 62 6a 7f 65 30 f4   .8..VT...Ybj.e0.
0080	dd 5c 62 80 01 74 42 12  6e 34 a8 1c e5 9d f4 91   .&#92;b..tB.n4......
0090	3c 34 83 10 00 1a 70 2e  bb f5 aa 01               &lt;4....p.....&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is finally time to get to the good part. Let&#39;s write some code.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Semantics of SDBD</title>
		<link href="https://crispbyte.dev/blog/2024-01-07-02-Semantics/"/>
		<updated>2024-01-07T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-01-07-02-Semantics/</id>
		<content type="html">&lt;p&gt;To really start bringing this new data format to life, we need to talk about what&#39;s in it. Establishing the semantics of a format gives us the terms and concepts we need to talk about the format abstractly before we get to any concrete details.&lt;/p&gt;
&lt;h2 id=&quot;start-with-the-data&quot; tabindex=&quot;-1&quot;&gt;Start with the data &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s start with a simple example. Here is a base64 encoding of some arbitrary data.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;oSAEACBQbusr6ZZslqwlPqhpIogL6slC7t74JE2zvQjVgNvwuQIxo76Rt2W9KIJ/khyI8jgd61ZU
uZPTWWJqf2Uw9N1cYoABdEISbjSoHOWd9JE8NIMQABpwLrv1qgE=&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How does somebody make sense of this? On my system I know how I created this file and I know the filename, so I know exactly what it is. But without that, what do you do? Let&#39;s use the &lt;code&gt;file&lt;/code&gt; tool to make a guess by running &lt;code&gt;file -i&lt;/code&gt; on it.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;application/octet-stream; charset=binary&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s not useful. The output might as well have been&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;¯&#92;_(ツ)_/¯&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;add-the-metadata&quot; tabindex=&quot;-1&quot;&gt;Add the metadata &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The only way you&#39;re going to make sense of this data is if I start giving you more information. The first thing I&#39;m going to tell you is that this is compressed with brotli.&lt;/p&gt;
&lt;p&gt;The format will use the concept that data encoding is different from the file type. Generally that will mean we can compress the data without having to nest our metadata. I&#39;ll add a metadata field to the format that tells you the encoding.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content-encoding: br&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you decompress the data and look at the result, it will immediately become apparent what the file is. For the sake of continuing this article, let&#39;s pretend that we&#39;re not human beings with advanced pattern recognition capabilities, but a computer that&#39;s not being allowed to guess.&lt;/p&gt;
&lt;p&gt;In order to understand this file, the next thing you need is to know the file type. Running &lt;code&gt;file -i&lt;/code&gt; on the decompressed file gets it right this time, but we&#39;re no longer allowed to guess. I&#39;ll give you another metadata field that tells you the file type.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content-type: text/plain; charset=us-ascii&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It&#39;s just plain ASCII text! Now that you have this information, you can properly interpret the data. Go ahead and try decoding the data now.&lt;/p&gt;
&lt;h2 id=&quot;this-looks-familiar&quot; tabindex=&quot;-1&quot;&gt;This looks familiar... &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Go ahead and give yourself a gold star if you recognize what I&#39;ve been doing so far. That&#39;s right, I am straight up ripping off HTTP. The metadata of SDBD will be a list of headers semantically equivalent to HTTP headers. I&#39;ll even say, for the sake of implementation, we&#39;ll follow similar rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Headers names are case insensitive&lt;/li&gt;
&lt;li&gt;Multiple headers can have the same name&lt;/li&gt;
&lt;li&gt;The order of headers is significant and must be preserved
Note that when we get to the proof of concept, I won&#39;t be following any of these rules.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-s-your-name&quot; tabindex=&quot;-1&quot;&gt;What&#39;s your name? &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I do need to make a few tweaks. Solving part of our original problem requires storing the filename. There aren&#39;t any standard HTTP headers that are exactly meant for this. &lt;code&gt;content-disposition&lt;/code&gt; can contain a filename, but its real purpose is something else. That header will normally look something like this:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content-disposition: attachment; filename=&quot;filename.jpg&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This header is meant to tell a browser whether the response should be displayed in the browser or downloaded. SDBD isn&#39;t meant specifically for browsers so we would be including useless information just to store a filename in an awkwardly formatted field.&lt;/p&gt;
&lt;p&gt;I&#39;ll create a new header for this.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content-name: sample.txt&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;when-does-it-end&quot; tabindex=&quot;-1&quot;&gt;When does it end? &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We need a way to identify exactly what size the data is. &lt;code&gt;content-length&lt;/code&gt; is technically optional in HTTP, since you can mark the end of a response by closing the connection. But we&#39;re not making any assumptions about the context of an SDBD, so we can&#39;t assume a connection to close. I&#39;d rather not try to create a marker for the end of the data, so I&#39;ll say that &lt;code&gt;content-length&lt;/code&gt; is required.&lt;/p&gt;
&lt;h2 id=&quot;what-do-we-actually-need&quot; tabindex=&quot;-1&quot;&gt;What do we actually need? &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s wrap this up by deciding what&#39;s required, what &lt;em&gt;should&lt;/em&gt; be present, and what&#39;s optional. I&#39;ve already decided that &lt;code&gt;content-length&lt;/code&gt; is required, and I think that&#39;s the only thing we absolutely need.&lt;/p&gt;
&lt;p&gt;I think &lt;code&gt;content-type&lt;/code&gt; should be present, but I don&#39;t want to make it an absolute requirement. I don&#39;t see a use case where you wouldn&#39;t want &lt;code&gt;content-type&lt;/code&gt;, but let&#39;s not limit ourselves unnecessarily. Also, since I haven&#39;t explicitly stated it yet, the value of &lt;code&gt;content-type&lt;/code&gt; must be a MIME type.&lt;/p&gt;
&lt;p&gt;If the documented is encoded (compressed), &lt;code&gt;content-encoding&lt;/code&gt; must also be present unless the metadata is specifically describing the encoded data. I don&#39;t want to define exactly what the value of &lt;code&gt;content-encoding&lt;/code&gt; must be, other than that implementations should support the common values used on the web: &lt;code&gt;gzip&lt;/code&gt;, &lt;code&gt;deflate&lt;/code&gt;, and &lt;code&gt;br&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Other encodings should perhaps use their own MIME type, such as &lt;code&gt;application/x-bzip2&lt;/code&gt;. I&#39;m not ready to set that in stone in case somebody comes up with a use case for encoding that isn&#39;t about compression.&lt;/p&gt;
&lt;p&gt;The data should have a good identifier as well, so we should give it a filename with &lt;code&gt;content-name&lt;/code&gt;, a URI with &lt;code&gt;content-location&lt;/code&gt;, or both.&lt;/p&gt;
&lt;p&gt;Anything else is optional.&lt;/p&gt;
&lt;p&gt;With that, here is the complete metadata for the example document.&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;content-name: sample.txt
content-encoding: br
content-type: text/plain; charset=us-ascii
content-length: 95&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;sounds-simple-enough&quot; tabindex=&quot;-1&quot;&gt;Sounds simple enough &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-02-Semantics/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That&#39;s all the information a computer would need to interpret the example data. The format consists of the data combined with metadata that is a list of headers semantically similar to HTTP headers. There&#39;s one header required for the length of the data, and a few others that are commended. That&#39;s all there is to it.&lt;/p&gt;
&lt;p&gt;Now we need to define what this will all look like in a real binary format.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Let&#39;s Create a Data Format</title>
		<link href="https://crispbyte.dev/blog/2024-01-07-01-SDBD/"/>
		<updated>2024-01-07T00:00:00Z</updated>
		<id>https://crispbyte.dev/blog/2024-01-07-01-SDBD/</id>
		<content type="html">&lt;p&gt;I have a problem. I want to be able to transfer self-contained binary data with metadata through a variety of protocols with no knowledge of the binary data&#39;s format or the protocol being used for transfer.&lt;/p&gt;
&lt;p&gt;Or in other words, I want to be able to send files anywhere without losing the filename.&lt;/p&gt;
&lt;p&gt;That&#39;s a bit simpler than my actual goal, but I think this is a problem every software developer has considered at some point. We&#39;ve all asked the question, &amp;quot;Why isn&#39;t the filename attached to the file?&amp;quot; or slightly more advanced, &amp;quot;Why isn&#39;t the file format attached to the file?&amp;quot;&lt;/p&gt;
&lt;p&gt;The answer isn&#39;t all that complicated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any file transfer protocol ever invented can pass the filename with the file&lt;/li&gt;
&lt;li&gt;File extensions are Good Enough for identifying the file format&lt;/li&gt;
&lt;li&gt;We have good tools for guessing the format if the filename is missing&lt;/li&gt;
&lt;li&gt;As human beings we can use context to guess the format and &amp;quot;fix&amp;quot; the extension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But I&#39;m going to declare that Good Enough isn&#39;t good enough. Perhaps this is the metadata that is most useful for files, but it&#39;s not the only useful metadata. It also depends on the transfer protocol to preserve the metadata. What if I don&#39;t want to rely on a specific protocol?&lt;/p&gt;
&lt;p&gt;And so, knowing full well that this is likely to go nowhere and that solutions to this problem almost certainly already exist, I&#39;m going to set out to create a new data format that encapsulates data and metadata into a single file.&lt;/p&gt;
&lt;h2 id=&quot;the-hard-problem&quot; tabindex=&quot;-1&quot;&gt;The hard problem &lt;a class=&quot;header-anchor&quot; href=&quot;https://crispbyte.dev/blog/2024-01-07-01-SDBD/&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first thing to do is give my new format a name. After some deliberation, I&#39;m going to settle on Self-described Binary Document or SDBD for short. It&#39;s contains arbitrary binary data. It&#39;s a document and not a file because it could live anywhere. And the whole purpose is to let the document describe its own contents. Now that I&#39;ve tackled &lt;a href=&quot;https://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;one of the hard problems&lt;/a&gt;, the rest should be easy.&lt;/p&gt;
&lt;p&gt;The next step is to talk about how we talk about the format. How is it structured and what concepts do we use to build it?&lt;/p&gt;
</content>
	</entry>
</feed>
